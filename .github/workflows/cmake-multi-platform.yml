# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            arch: x86
            option: -A Win32
          - os: windows-latest
            c_compiler: cl
            arch: x86_64
            option: -A x64
          - os: windows-latest
            c_compiler: cl
            arch: arm
            option: -A ARM
          - os: windows-latest
            c_compiler: cl
            arch: arm64
            option: -A ARM64
          - os: ubuntu-latest
            c_compiler: aarch64-linux-gnu-gcc
            arch: ARM64
            option: 
          - os: ubuntu-latest
            c_compiler: arm-linux-gnueabi-gcc
            arch: ARM
            option: 
          - os: ubuntu-latest
            c_compiler: x86_64-linux-gnu-gcc
            arch: x86_64
            option: 
          - os: macos-latest
            c_compiler: gcc
            arch: arm64
            option: -DCMAKE_OSX_ARCHITECTURES=arm64
          - os: macos-latest
            c_compiler: gcc
            arch: x86_64
            option: -DCMAKE_OSX_ARCHITECTURES=x86_64
          - os: macos-latest
            c_compiler: gcc
            arch: universal
            option: -DCMAKE_OSX_ARCHITECTURES=x86_64;arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "artifact-name=${{ matrix.os }}-${{ matrix.arch }}" >> "$GITHUB_OUTPUT"
        echo "artifact-path=${{ github.workspace }}/artifacts/${{ matrix.os }}-${{ matrix.arch }}.zip" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        ${{ matrix.option }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Zip artifacts
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p ${{ github.workspace }}/artifacts
        cd ${{ steps.strings.outputs.build-output-dir }}
        zip -r ${{ steps.strings.outputs.artifact-path }} ./

    - name: Zip artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir ${{ github.workspace }}/artifacts
        cd ${{ github.workspace }}/artifacts
        Compress-Archive -Destination ${{ steps.strings.outputs.artifact-path }} -Path ${{ steps.strings.outputs.build-output-dir }}/*

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.artifact-name }}
        path: ${{ steps.strings.outputs.artifact-path }}

  release:
    needs: build
  
    runs-on: ubuntu-latest
    steps:
    - name: Create release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.ref }}
        body: |
          Test Release
        draft: false
        prerelease: false

    - name: Create artifacts folder
      run: |
        mkdir -p ${{ github.workspace }}/artifacts

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/artifacts
    
    - name: Upload Release Asset
      uses: dwenegar/upload-release-assets@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
        assets_path: ${{ github.workspace }}/artifacts
